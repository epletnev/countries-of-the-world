{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/FilterBy.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","flag","name","region","capital","languages","currencies","area","population","className","alt","src","CardList","countries","map","country","i","key","SearchBox","searchChange","type","placeholder","onChange","FilterBy","handleChange","defaultValue","value","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","onHandleChange","handleFetch","state","fetch","then","response","json","this","filteredCountries","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c54b336.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ flag, name, region, capital, languages, currencies, area, population }) => {\n\treturn (\n\t\t<div className='tc bg-washed-red dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='countries' src={flag} className='w5'/>\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p><strong>Region:</strong> {region}</p>\n\t\t<p><strong>Capital:</strong> {capital}</p>\n\t\t<p><strong>Language:</strong> {languages}</p>\n\t\t<p><strong>Currency:</strong> {currencies}</p>\n\t\t<p><strong>Area:</strong> {area}</p>\n\t\t<p><strong>Population:</strong> {population}</p>\t\t\t\t\t\t\n\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n\n\texport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ countries }) => {\n\treturn (\n\t\t<div>\n\t\t  {\n\t\t\tcountries.map((country, i) => {\n\t\t    \treturn (\n\t\t\t\t\t<Card \t\t\n\t\t\t\t\t    key={i}\t\t\t\t\n\t\t\t\t\t\tflag={countries[i].flag} \t\t\t\t\n\t\t\t\t\t\tname={countries[i].name} \n\t\t\t\t\t\tregion={countries[i].region}\n\t\t\t\t\t\tcapital={countries[i].capital}\n\t\t\t\t\t\tlanguages={countries[i].languages[0].name}\n\t\t\t\t\t\tcurrencies={countries[i].currencies[0].name}\n\t\t\t\t\t\tarea={countries[i].area}\n\t\t\t\t\t\tpopulation={countries[i].population}\n\t\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search countries' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst FilterBy = ({ handleChange }) => {\n\n\treturn (\n\t\t<div className='pa2'>\n\t\t<select className='pa3 ba b--green bg-lightest-blue' defaultValue='filter' onChange={handleChange}>\n\t\t<option value=\"filter\">Filter by region</option>\n\t\t<option value=\"asia\">Asia</option>\n\t\t<option value=\"europe\">Europe</option>\t\t\n\t\t<option value=\"africa\">Africa</option>\n\t\t<option value=\"oceania\">Oceania</option>\n\t\t<option value=\"americas\">Americas</option>\n\t\t<option value=\"polar\">Polar</option>\n\t\t</select>\n\t\t</div>\n\t\t);\n\t}\n\n\texport default FilterBy;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport FilterBy from '../components/FilterBy';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tcountries: [],\n\t\t\tsearchfield: '',\n\t\t\tvalue: 'filter'\n\t\t}\t\t\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t}\n\n\tonHandleChange = (event) => {\n\t\tthis.setState({value: event.target.value});      \n\t}\n\n\thandleFetch = () => {\n\t\tif (this.state.value === 'filter') {\n\t\t\tfetch('https://restcountries.eu/rest/v2/all')\n\t\t\t.then(response => response.json())\n\t\t\t.then(country => this.setState({ countries: country }));\t\t\n\t\t} else {\n\t\t\tfetch(`https://restcountries.eu/rest/v2/region/${this.state.value}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(country => this.setState({ countries: country }));\n\t\t} \t \t\n\t}\n\n\trender() {\t\t\n\t\tthis.handleFetch()  \n\t\tconst { countries, searchfield } = this.state;\n\t\tconst filteredCountries = countries.filter(country =>{\n\t\t\treturn country.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\treturn !countries.length ?\n\t\t<h1>Loading</h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>Countries of the world</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t<FilterBy handleChange={this.onHandleChange}/>\n\t\t\t<Scroll>\n\t\t\t<CardList countries={filteredCountries} />\n\t\t\t</Scroll>\n\t\t\t</div>\t\n\t\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}